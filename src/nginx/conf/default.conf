# ---------------------------------------------------
# Server Block for Local Development (HTTPS on localhost)
# Accessed via https://localhost:8080 on your host machine 
# This block uses self-signed certificates for 'localhost'.
# ---------------------------------------------------
server {
    listen 443 ssl;         # Nginx listens on port 443 internally for HTTPS
    listen [::]:443 ssl;
    server_name localhost 127.0.0.1; # Respond to requests for localhost and 127.0.0.1

    ssl_certificate /etc/nginx/ssl/localhost.crt;  # Path to your self-signed localhost certificate
    ssl_certificate_key /etc/nginx/ssl/localhost.key; # Path to your self-signed localhost private key
    ssl_protocols TLSv1.2 TLSv1.3; # Enable modern TLS protocols

    # Root for static frontend files
    root /usr/share/nginx/html;
    index index.html;

    # Serve static files and handle client-side routing
    location / {
        try_files $uri $uri/ /index.html =404; # Fallback to index.html for client-side routing
    }

    # Proxy API requests to the backend service
    location /api/ {
        proxy_pass http://backend:3000/api/; 
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Original-Uri $request_uri;
        access_log /var/log/nginx/proxy_logs/api_access.log;
        error_log /var/log/nginx/proxy_logs/api_error.log warn;
    }

    # Proxy WebSocket connections to the backend service
    location /ws/ {
        proxy_pass http://backend:3000/ws/;
        proxy_http_version 1.1; # Required for WebSocket proxying
        proxy_set_header Upgrade $http_upgrade; # Required for WebSocket proxying
        proxy_set_header Connection "Upgrade"; # Required for WebSocket proxying
        proxy_set_header Host $host;
        access_log /var/log/nginx/proxy_logs/ws_access.log;
        error_log /var/log/nginx/proxy_logs/ws_error.log warn;
    }

    # Proxy file uploads to the backend service
    location /uploads/ {
        proxy_pass http://backend:3000/uploads/;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Original-Uri $request_uri;
        access_log /var/log/nginx/proxy_logs/uploads_access.log;
        error_log /var/log/nginx/proxy_logs/uploads_error.log warn;
    }
}


# ---------------------------------------------------
# Server Block for Production (via Cloudflare Tunnel)
# No SSL certificates are needed here as Nginx acts as an HTTP reverse proxy internally.
# ---------------------------------------------------
server {
    listen 80;          # Nginx listens on port 80 internally for HTTP traffic from Cloudflare Tunnel
    listen [::]:80;
    server_name netpong.com; # Your actual production domain name

    # Root for static frontend files
    root /usr/share/nginx/html;
    index index.html;

    # Serve static files and handle client-side routing
    location / {
        try_files $uri $uri/ /index.html =404;
    }

    # Proxy API requests to the backend service
    location /api/ {
        proxy_pass http://backend:3000/api/;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme; # Use original scheme (likely https from Cloudflare)
        proxy_set_header X-Original-Uri $request_uri;
        access_log /var/log/nginx/proxy_logs/api_access_prod.log;
    }

    # Proxy WebSocket connections to the backend service
    location /ws/ {
        proxy_pass http://backend:3000/ws/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        access_log /var/log/nginx/proxy_logs/ws_access_prod.log;
    }

    # Proxy file uploads to the backend service
    location /uploads/ {
        proxy_pass http://backend:3000/uploads/;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Original-Uri $request_uri;
        access_log /var/log/nginx/proxy_logs/uploads_access_prod.log;
    }
}